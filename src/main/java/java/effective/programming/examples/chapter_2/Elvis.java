package java.effective.programming.examples.chapter_2;

/**
 * Получайте синглтон с помощью закрытого
 * конструктора или типа перечисления.
 * <br>
 * Превращение класса в синглтон может затруднить тести
 * рование его клиентов.
 * <br>
 * Одним из преимуществ подхода со статической фабрикой является то, что
 * он обеспечивает достаточную гибкость для того, чтобы изменить синглтон на
 * класс, не являющийся таковым, без изменения его API. Фабричный метод воз
 * вращает единственный экземпляр, но может быть изменен таким образом, что
 * бы возвращать, скажем, отдельный экземпляр для каждого вызывающего его
 * потока
 * <br>
 * Вторым преимуществом является то, что можно написать обобщенную фабрику синглтонов,
 * если таковая требуется вашему приложению.
 * <br>
 * Последнее преимущество использования статической фабрики состоит в том,
 * что ссылка на метод может использоваться в качестве поставщика, например
 * Elvis::instance является Supplier<Elvis>.
 */
public class Elvis {
    private static final Elvis INSTANCE = new Elvis();
    private Elvis()
    {
    }
    public static Elvis getInstance()
    {
        return INSTANCE;
    }
    public void leaveTheBuilding()
    {
    }
}
